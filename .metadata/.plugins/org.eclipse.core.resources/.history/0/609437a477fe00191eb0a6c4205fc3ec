package controller;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;

import model.*;

/**
 * Controller class for connecting and querying to an PostgreSQL database.
 * 
 * Note: best practice is to create an connection pool for connecting and querying to database (using e.g. APACHE DBCP or c3p0), 
 * since this is a project made in short time and the amount of stress put on the database is relatively low for this case,
 * such implementations will be ignored.
 */
public class PsqlController {
	private String credentials = "jdbc:postgresql://pgserver.mah.se/rockfestival_robin_maida?user=ah2881&password=qqolpct3";

	public PsqlController() {

	}

	//MARK: INSERT Statements

	/**
	 * Creates an Entity of artist in DB, using name of the artist
	 * @param name - name of the artist 
	 */
	public void insertArtist(String name) {
		Connection c = null;
		Statement stmt = null;
		try {
			Class.forName("org.postgresql.Driver");
			c = DriverManager.getConnection(credentials);
			c.setAutoCommit(false);

			stmt = c.createStatement();
			String sql = "INSERT INTO artist (name) "
					+ "VALUES ('"+name.toLowerCase()+"');";
			stmt.executeUpdate(sql);

			stmt.close();
			c.commit();
			c.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}
		System.out.println("created entity in TABLE artist");
	}

	/**
	 * Creates an entity of artist_in_band in DB. This means assigning
	 * an artist as member of an band. The band provided needs to exist in the
	 * database as well as the artist. NOTE the name of artist is to be provided,
	 * the method will match the id of the artist to provide in the DB.
	 * @param artist - name of the artist
	 * @param band - name of the band
	 */
	public void insertArtistInBand(String artist, String band, String role) {
		Connection c = null;
		Statement stmt = null;
		try {
			Class.forName("org.postgresql.Driver");
			c = DriverManager.getConnection(credentials);
			c.setAutoCommit(false);

			stmt = c.createStatement();
			String sql = "INSERT INTO artist_in_band (artist, band, role) "
					+ "VALUES ((SELECT id FROM artist WHERE name='"+artist.toLowerCase()+"'), '"+band.toLowerCase()+"', '"+role.toLowerCase()+"');";
			stmt.executeUpdate(sql);

			stmt.close();
			c.commit();
			c.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}
		System.out.println("created entity in TABLE artist_in_band");
	}

	public void insertBand(String name, String country, String info, String contactPerson) {
		Connection c = null;
		Statement stmt = null;
		try {
			Class.forName("org.postgresql.Driver");
			c = DriverManager.getConnection(credentials);
			c.setAutoCommit(false);

			stmt = c.createStatement();
			String sql = "INSERT INTO band (name, country, info, contact_person) "
					+ "VALUES ('"+name.toLowerCase()+"', '"+country.toLowerCase()+"', '"+info.toLowerCase()+"','"+contactPerson.toLowerCase()+"');";
			stmt.executeUpdate(sql);

			stmt.close();
			c.commit();
			c.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}
		System.out.println("created entity in TABLE band");
	}

	public void insertScene(String name, int capacity, String location) {
		Connection c = null;
		Statement stmt = null;
		try {
			Class.forName("org.postgresql.Driver");
			c = DriverManager.getConnection(credentials);
			c.setAutoCommit(false);

			stmt = c.createStatement();
			String sql = "INSERT INTO scene (name, capacity, location) "
					+ "VALUES ('"+name.toLowerCase()+"', "+capacity+", '"+location.toLowerCase()+"');";
			stmt.executeUpdate(sql);

			stmt.close();
			c.commit();
			c.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}
		System.out.println("created entity in TABLE scene");
	}

	public void insertSchedule(String band, String scene, String start, String end, String day) {
		Connection c = null;
		Statement stmt = null;
		try {
			Class.forName("org.postgresql.Driver");
			c = DriverManager.getConnection(credentials);
			c.setAutoCommit(false);

			stmt = c.createStatement();
			String sql = "INSERT INTO schedule (band, scene, start, \"end\", day) "
					+ "VALUES ('"+band.toLowerCase()+"','"+scene.toLowerCase()+"' , '"+start+"', '"+end+"','"+day.toLowerCase()+"');";
			stmt.executeUpdate(sql);

			stmt.close();
			c.commit();
			c.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}
		System.out.println("created entity in TABLE schedule");
	}

	public void insertWorker(String personNbr, String name, String address) {
		Connection c = null;
		Statement stmt = null;
		try {
			Class.forName("org.postgresql.Driver");
			c = DriverManager.getConnection(credentials);
			c.setAutoCommit(false);

			stmt = c.createStatement();
			String sql = "INSERT INTO worker (person_nbr, name, address) "
					+ "VALUES ('"+personNbr+"', '"+name.toLowerCase()+"', '"+address.toLowerCase()+"');";
			stmt.executeUpdate(sql);

			stmt.close();
			c.commit();
			c.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}
		System.out.println("created entity in TABLE worker");
	}

	//MARK: UPDATE Statement

	public void updateTable(String table, String values, String where) {
		//if where = null, do without where clause, vice versa! 
	}

	//MARK: SELECT statements

	/**
	 * Retrieves data from Artist table in DB, all attributes will be fetched into an Artist 
	 * Object where each attribute can be retrieved.
	 * @param where - where-clause, if no where-clause is to be used, enter null
	 * @return returns an array of Artist Objects
	 */
	public ArrayList<Artist> selectArtist(String where) {
		Connection c = null;
		Statement stmt = null;
		ArrayList<Artist> retrievedData = new ArrayList<Artist>();
		try {
			Class.forName("org.postgresql.Driver");
			c = DriverManager.getConnection(credentials);
			c.setAutoCommit(false);

			stmt = c.createStatement();
			String sql;
			if(where!=null) { //with WHERE clause
				sql = "SELECT * FROM artist "
						+ "WHERE "+where.toLowerCase()+";";
			}else { //without WHERE clause
				sql = "SELECT * FROM artist;";
			}
			ResultSet rs = stmt.executeQuery(sql);
			while (rs.next()) { //loops through the fetched data and saves each entity as an Artist Object in the ArrayList
				Artist a = new Artist(rs.getString("id"), rs.getString("name"));
				retrievedData.add(a);
			}

			rs.close();
			stmt.close();
			c.commit();
			c.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}
		System.out.println("Retrieved data from TABLE artist");
		return retrievedData;	
	}

	/**
	 * Retrieves data from artist_in_band table in DB, all attributes will be fetched into an ArtistInBand 
	 * Object where each attribute can be retrieved.
	 * @param where - where-clause, if no where-clause is to be used, enter null
	 * @return returns an array of ArtistInBand Objects
	 */
	public ArrayList<ArtistInBand> selectArtistInBand(String where) {
		Connection c = null;
		Statement stmt = null;
		ArrayList<ArtistInBand> retrievedData = new ArrayList<ArtistInBand>();
		try {
			Class.forName("org.postgresql.Driver");
			c = DriverManager.getConnection(credentials);
			c.setAutoCommit(false);

			stmt = c.createStatement();
			String sql;
			if(where!=null) { //with WHERE clause
				sql = "SELECT * FROM artist_in_band "
						+ "WHERE "+where.toLowerCase()+";";
			}else { //without WHERE clause
				sql = "SELECT * FROM artist_in_band;";
			}
			ResultSet rs = stmt.executeQuery(sql);
			while (rs.next()) { //loops through the fetched data and saves each entity as an Artist Object in the ArrayList
				ArtistInBand a = new ArtistInBand(rs.getString("artist"), rs.getString("band"), rs.getString("role"));
				retrievedData.add(a);
			}

			rs.close();
			stmt.close();
			c.commit();
			c.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}
		System.out.println("Retrieved data from TABLE artist_in_band");
		return retrievedData;	
	}

	/**
	 * Retrieves data from Band table in DB, all attributes will be fetched into an Band 
	 * Object where each attribute can be retrieved.
	 * @param where - where-clause, if no where-clause is to be used, enter null
	 * @return returns an array of Band Objects
	 */
	public ArrayList<Band> selectBand(String where) {
		Connection c = null;
		Statement stmt = null;
		ArrayList<Band> retrievedData = new ArrayList<Band>();
		try {
			Class.forName("org.postgresql.Driver");
			c = DriverManager.getConnection(credentials);
			c.setAutoCommit(false);

			stmt = c.createStatement();
			String sql;
			if(where!=null) { //with WHERE clause
				sql = "SELECT * FROM band "
						+ "WHERE "+where.toLowerCase()+";";
			}else { //without WHERE clause
				sql = "SELECT * FROM band;";
			}
			ResultSet rs = stmt.executeQuery(sql);
			while (rs.next()) { //loops through the fetched data and saves each entity as an Artist Object in the ArrayList
				Band a = new Band(rs.getString("name"), rs.getString("country"), rs.getString("info"), rs.getString("contact_person"));
				retrievedData.add(a);
			}

			rs.close();
			stmt.close();
			c.commit();
			c.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}
		System.out.println("Retrieved data from TABLE band");
		return retrievedData;	
	}

	/**
	 * Retrieves data from Scene table in DB, all attributes will be fetched into an Scene 
	 * Object where each attribute can be retrieved.
	 * @param where - where-clause, if no where-clause is to be used, enter null
	 * @return returns an array of Scene Objects
	 */
	public ArrayList<Scene> selectScene(String where) {
		Connection c = null;
		Statement stmt = null;
		ArrayList<Scene> retrievedData = new ArrayList<Scene>();
		try {
			Class.forName("org.postgresql.Driver");
			c = DriverManager.getConnection(credentials);
			c.setAutoCommit(false);

			stmt = c.createStatement();
			String sql;
			if(where!=null) { //with WHERE clause
				sql = "SELECT * FROM scene "
						+ "WHERE "+where.toLowerCase()+";";
			}else { //without WHERE clause
				sql = "SELECT * FROM scene;";
			}
			ResultSet rs = stmt.executeQuery(sql);
			while (rs.next()) { //loops through the fetched data and saves each entity as an Artist Object in the ArrayList
				Scene a = new Scene(rs.getString("name"), rs.getString("capacity"), rs.getString("location"));
				retrievedData.add(a);
			}
			rs.close();
			stmt.close();
			c.commit();
			c.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(0);
		}
		System.out.println("Retrieved data from TABLE scene");
		return retrievedData;	
	}


	public static void main(String[] args) {
		PsqlController c = new PsqlController();
		ArrayList<Scene> a = c.selectScene(null);
		for(Scene element: a) {
			System.out.println("scene: " + element.getName() + " capacity: " + element.getCapacity() + " location: " + element.getLocation());
		}
		



	}
}
